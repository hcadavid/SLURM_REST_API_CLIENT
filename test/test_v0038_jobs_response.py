# coding: utf-8

"""
    Slurm Rest API RO

    API to access Slurm. Only GET requests are implemented.

    The version of the OpenAPI document: 0.0.38
    Contact: sales@schedmd.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.v0038_jobs_response import V0038JobsResponse

class TestV0038JobsResponse(unittest.TestCase):
    """V0038JobsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V0038JobsResponse:
        """Test V0038JobsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V0038JobsResponse`
        """
        model = V0038JobsResponse()
        if include_optional:
            return V0038JobsResponse(
                meta = {"Slurm":{"release":"release","version":{"major":0,"minor":1,"micro":6}},"plugin":{"name":"name","type":"type"}},
                errors = [
                    {"description":"description","source":"source","error":"error","error_number":5}
                    ],
                jobs = [
                    {"container":"container","cluster":"cluster","time_minimum":3,"memory_per_tres":"memory_per_tres","qos":"qos","resize_time":0,"eligible_time":2,"cpus_per_tres":"cpus_per_tres","tasks":6,"system_comment":"system_comment","federation_siblings_active":"federation_siblings_active","tasks_per_core":6,"accrue_time":0,"dependency":"dependency","profile":["profile","profile"],"priority":7,"tres_per_job":"tres_per_job","derived_exit_code":3,"core_spec":"core_spec","mcs_label":"mcs_label","required_nodes":"required_nodes","tres_bind":"tres_bind","user_id":5,"exit_code":7,"federation_origin":"federation_origin","shared":"shared","tasks_per_board":9,"user_name":"user_name","flags":["flags","flags"],"standard_input":"standard_input","admin_comment":"admin_comment","cores_per_socket":"cores_per_socket","job_state":"job_state","current_working_directory":"current_working_directory","standard_error":"standard_error","array_job_id":6,"cluster_features":"cluster_features","partition":"partition","threads_per_core":7,"tres_alloc_str":"tres_alloc_str","memory_per_cpu":6,"cpu_frequency_minimum":"cpu_frequency_minimum","node_count":3,"deadline":7,"memory_per_node":6,"state_reason":"state_reason","het_job_offset":2,"end_time":4,"sockets_per_board":6,"nice":9,"last_sched_evaluation":4,"tres_per_node":"tres_per_node","burst_buffer":"burst_buffer","licenses":"licenses","excluded_nodes":"excluded_nodes","array_max_tasks":5,"het_job_id":1,"sockets_per_node":0,"time_limit":3,"minimum_cpus_per_node":5,"tasks_per_socket":8,"batch_host":"batch_host","max_cpus":5,"cpu_frequency_maximum":"cpu_frequency_maximum","features":"features","het_job_id_set":"het_job_id_set","state_description":"state_description","show_flags":["show_flags","show_flags"],"array_task_id":1,"minimum_tmp_disk_per_node":6,"tres_req_str":"tres_req_str","burst_buffer_state":"burst_buffer_state","tres_per_socket":"tres_per_socket","array_task_string":"array_task_string","submit_time":8,"wckey":"wckey","max_nodes":9,"batch_flag":true,"start_time":4,"name":"name","preempt_time":3,"contiguous":true,"job_resources":{"nodes":"nodes","allocated_nodes":[{"nodename":"nodename","memory":7,"cpus":1,"sockets":{"cores":"{}"}},{"nodename":"nodename","memory":7,"cpus":1,"sockets":{"cores":"{}"}}],"allocated_cpus":1,"allocated_hosts":6},"billable_tres":2.3021358869347655,"federation_siblings_viable":"federation_siblings_viable","cpus_per_task":"cpus_per_task","batch_features":"batch_features","thread_spec":"thread_spec","cpu_frequency_governor":"cpu_frequency_governor","gres_detail":["gres_detail","gres_detail"],"restart_cnt":7,"resv_name":"resv_name","delay_boot":9,"reboot":true,"cpus":6,"standard_output":"standard_output","pre_sus_time":3,"suspend_time":7,"association_id":5,"command":"command","tres_freq":"tres_freq","requeue":true,"tres_per_task":"tres_per_task","nodes":"nodes","group_id":1,"job_id":1,"comment":"comment","account":"account"}
                    ]
            )
        else:
            return V0038JobsResponse(
        )
        """

    def testV0038JobsResponse(self):
        """Test V0038JobsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
